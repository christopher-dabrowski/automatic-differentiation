name: Build LaTeX and Publish PDF

on:
  push:
    branches: [ main ]
    paths:
      - 'LiteratureReview/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'LiteratureReview/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build_latex:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: LiteratureReview/LiteratureReview.tex
          working_directory: .
          args: -pdf -file-line-error -interaction=nonstopmode
          extra_fonts: |
            # If you have any custom fonts, add them here
          extra_system_packages: |
            # Required packages for Polish characters support
            texlive-lang-polish
            texlive-fonts-recommended

      - name: Create PDF artifacts directory
        run: mkdir -p pdf_artifacts

      - name: Copy PDF to artifacts directory
        run: cp LiteratureReview/LiteratureReview.pdf pdf_artifacts/

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v3
        with:
          name: LiteratureReview
          path: pdf_artifacts/LiteratureReview.pdf

      - name: Deploy PDF to PDF branch
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Save the commit timestamp for the PDF filename
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          PDF_FILENAME="LiteratureReview_${TIMESTAMP}.pdf"

          # Check if the pdf branch exists and fetch it
          if git ls-remote --heads origin pdf | grep -q 'pdf'; then
            # Branch exists, fetch it
            git fetch origin pdf:pdf
            git checkout pdf
          else
            # Create orphan branch if it doesn't exist
            git checkout --orphan pdf
            git rm -rf .
          fi

          # Create docs directory if it doesn't exist
          mkdir -p docs
          # Copy the latest PDF with timestamp in filename
          cp pdf_artifacts/LiteratureReview.pdf "docs/${PDF_FILENAME}"
          # Also copy it as the "latest" version
          cp pdf_artifacts/LiteratureReview.pdf docs/LiteratureReview_latest.pdf

          # Create index.html if it doesn't exist
          if [ ! -f docs/index.html ]; then
            cat > docs/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automatic Differentiation - Literature Review</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1 {
            color: #333;
        }
        ul {
            list-style-type: none;
            padding: 0;
        }
        li {
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 4px;
        }
        .latest {
            background-color: #e6f7ff;
            border-left: 4px solid #1890ff;
            font-weight: bold;
        }
        a {
            text-decoration: none;
            color: #0366d6;
        }
        a:hover {
            text-decoration: underline;
        }
        .timestamp {
            color: #666;
            font-size: 0.8em;
        }
    </style>
</head>
<body>
    <h1>Automatic Differentiation - Literature Review</h1>
    <p>Generated PDFs from the LaTeX source</p>
    <ul id="pdfList">
        <li class="latest"><a href="LiteratureReview_latest.pdf">Latest version</a></li>
    </ul>

    <script>
        // This script will be updated by the GitHub Action to list all PDFs
        const pdfFiles = ["${PDF_FILENAME}"];
        const pdfList = document.getElementById('pdfList');

        pdfFiles.forEach(file => {
            if (file !== "LiteratureReview_latest.pdf") {
                const li = document.createElement('li');
                const link = document.createElement('a');
                link.href = file;

                // Extract timestamp from filename
                const timestamp = file.replace('LiteratureReview_', '').replace('.pdf', '');
                const formattedDate = timestamp.replace(/_/g, ' ').replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3');

                link.textContent = "Version from " + formattedDate;

                li.appendChild(link);
                pdfList.appendChild(li);
            }
        });
    </script>
</body>
</html>
EOF
          fi

          # Update the list of PDFs in the index.html file
          PDF_FILES=$(find docs -name "LiteratureReview_*.pdf" -not -name "LiteratureReview_latest.pdf" | sort -r | sed 's|docs/||' | sed 's/^/"/' | sed 's/$/",/' | tr '\n' ' ')
          sed -i "s/const pdfFiles = \[.*\];/const pdfFiles = [${PDF_FILES}];/" docs/index.html

          # Add, commit and push the PDF and index
          git add docs/
          git commit -m "Update compiled PDF from commit ${GITHUB_SHA}"
          git push -f origin pdf
