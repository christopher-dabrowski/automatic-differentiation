name: Build LaTeX and Publish PDF

on:
  push:
    branches: [main]
    paths:
      - "LiteratureReview/**"
  pull_request:
    branches: [main]
    paths:
      - "LiteratureReview/**"
  workflow_dispatch: # Allow manual triggering

jobs:
  build_latex:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: LiteratureReview/LiteratureReview.tex
          working_directory: .
          args: -pdf -file-line-error -interaction=nonstopmode
          extra_fonts: |
            # If you have any custom fonts, add them here
          extra_system_packages: |
            # Required packages for Polish characters support
            texlive-lang-polish
            texlive-fonts-recommended

      - name: Create PDF artifacts directory
        run: mkdir -p pdf_artifacts

      - name: Copy PDF to artifacts directory
        run: cp LiteratureReview/LiteratureReview.pdf pdf_artifacts/

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v3
        with:
          name: LiteratureReview
          path: pdf_artifacts/LiteratureReview.pdf

      - name: Deploy PDF to PDF branch
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Save the commit timestamp for the PDF filename
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          PDF_FILENAME="LiteratureReview_${TIMESTAMP}.pdf"

          # Check if the pdf branch exists and fetch it
          if git ls-remote --heads origin pdf | grep -q 'pdf'; then
            # Branch exists, fetch it
            git fetch origin pdf:pdf
            git checkout pdf
          else
            # Create orphan branch if it doesn't exist
            git checkout --orphan pdf
            git rm -rf .
          fi

          # Create docs directory if it doesn't exist
          mkdir -p docs
          # Copy the latest PDF with timestamp in filename
          cp pdf_artifacts/LiteratureReview.pdf "docs/${PDF_FILENAME}"
          # Also copy it as the "latest" version
          cp pdf_artifacts/LiteratureReview.pdf docs/LiteratureReview_latest.pdf          # Create a simplified index.html file
          if [ ! -f docs/index.html ]; then
            echo '<!DOCTYPE html>' > docs/index.html
            echo '<html lang="en">' >> docs/index.html
            echo '<head>' >> docs/index.html
            echo '    <meta charset="UTF-8">' >> docs/index.html
            echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> docs/index.html
            echo '    <title>Automatic Differentiation - Literature Review</title>' >> docs/index.html
            echo '    <style>' >> docs/index.html
            echo '        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }' >> docs/index.html
            echo '        h1 { color: #333; }' >> docs/index.html
            echo '        ul { list-style-type: none; padding: 0; }' >> docs/index.html
            echo '        li { margin-bottom: 10px; padding: 10px; background-color: #f9f9f9; border-radius: 4px; }' >> docs/index.html
            echo '        .latest { background-color: #e6f7ff; border-left: 4px solid #1890ff; font-weight: bold; }' >> docs/index.html
            echo '        a { text-decoration: none; color: #0366d6; }' >> docs/index.html
            echo '        a:hover { text-decoration: underline; }' >> docs/index.html
            echo '        .timestamp { color: #666; font-size: 0.8em; }' >> docs/index.html
            echo '    </style>' >> docs/index.html
            echo '</head>' >> docs/index.html
            echo '<body>' >> docs/index.html
            echo '    <h1>Automatic Differentiation - Literature Review</h1>' >> docs/index.html
            echo '    <p>Generated PDFs from the LaTeX source</p>' >> docs/index.html
            echo '    <ul id="pdfList">' >> docs/index.html
            echo '        <li class="latest"><a href="LiteratureReview_latest.pdf">Latest version</a></li>' >> docs/index.html
            echo '    </ul>' >> docs/index.html
            echo '' >> docs/index.html
            echo '    <script>' >> docs/index.html
            echo '        // This script will be updated by the GitHub Action to list all PDFs' >> docs/index.html
            echo '        const pdfFiles = ["'${PDF_FILENAME}'"];' >> docs/index.html
            echo '        const pdfList = document.getElementById("pdfList");' >> docs/index.html
            echo '        ' >> docs/index.html
            echo '        pdfFiles.forEach(file => {' >> docs/index.html
            echo '            if (file !== "LiteratureReview_latest.pdf") {' >> docs/index.html
            echo '                const li = document.createElement("li");' >> docs/index.html
            echo '                const link = document.createElement("a");' >> docs/index.html
            echo '                link.href = file;' >> docs/index.html
            echo '                ' >> docs/index.html
            echo '                // Extract timestamp from filename' >> docs/index.html
            echo '                const timestamp = file.replace("LiteratureReview_", "").replace(".pdf", "");' >> docs/index.html
            echo '                const formattedDate = timestamp.replace(/_/g, " ").replace(/(\d{4})(\d{2})(\d{2})/, "$1-$2-$3");' >> docs/index.html
            echo '                ' >> docs/index.html
            echo '                link.textContent = "Version from " + formattedDate;' >> docs/index.html
            echo '                ' >> docs/index.html
            echo '                li.appendChild(link);' >> docs/index.html
            echo '                pdfList.appendChild(li);' >> docs/index.html
            echo '            }' >> docs/index.html
            echo '        });' >> docs/index.html
            echo '    </script>' >> docs/index.html
            echo '</body>' >> docs/index.html
            echo '</html>' >> docs/index.html
          fi

          # Update the list of PDFs in the index.html file
          PDF_FILES=$(find docs -name "LiteratureReview_*.pdf" -not -name "LiteratureReview_latest.pdf" | sort -r | sed 's|docs/||' | sed 's/^/"/' | sed 's/$/",/' | tr '\n' ' ')
          sed -i "s/const pdfFiles = \\[.*\\];/const pdfFiles = [${PDF_FILES}];/" docs/index.html

          # Add, commit and push the PDF and index
          git add docs/
          git commit -m "Update compiled PDF from commit ${GITHUB_SHA}"
          git push -f origin pdf
